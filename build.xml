<project name="LuceneInAction" default="default">
  <target name="help">
    <loadfile property="readme" srcfile="README"/>
    <echo level="info">
      ${readme}
    </echo>
  </target>

  <property name="build.dir" location="build"/>
  <property name="data.dir" location="data"/>

  <available property="test.index.exists" file="${build.dir}/index"/>
  <available property="perf.index.exists" file="${build.dir}/perf"/>

  <path id="classpath">
    <fileset dir="lib"/>
  </path>

  <macrodef name="run-main">
    <attribute name="class"/>
    <attribute name="spawn" default="no"/>
    <element name="args" optional="yes"/>

    <sequential>
      <echo>Running @{class}...</echo>
      <java classname="@{class}" fork="true" spawn="@{spawn}">
        <sysproperty key="index.dir" file="${build.dir}/index"/>
        <args/>
        <classpath>
          <path refid="classpath"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="conf"/> <!-- for Nutch -->
        </classpath>
      </java>
    </sequential>
  </macrodef>

  <macrodef name="info">
    <text name="text"/>
    <sequential>
      <echo level="info">@{text}</echo>
      <input addProperty="nopause" message="Press return to continue..."/>
    </sequential>
  </macrodef>

  <target name="clean" description="Remove temporary build artifacts">
    <delete dir="${build.dir}"/>
  </target>

  <target name="check-environment">
    <available classname="junit.framework.TestCase"
               property="junit.available"/>
    <fail unless="junit.available">
      JUnit not available.  Add junit.jar to ANT_HOME/lib
    </fail>
  </target>

  <target name="compile" description="Compile source code" depends="check-environment">
    <mkdir dir="${build.dir}/classes"/>
    <javac srcdir="src"
           destdir="${build.dir}/classes"
           classpathref="classpath"
           encoding="UTF8"
           debug="on"
           deprecation="on"
    />
  </target>

  <target name="build-test-index" depends="compile"
          unless="test.index.exists"
          description="Build test data index">
    <info>
      The test index is built using the Lucene &lt;index&gt; task
      from the Lucene Sandbox.  This task is described in the
      "Tools and extensions" chapter.
    </info>

    <typedef resource="org/apache/lucene/ant/antlib.xml">
      <classpath>
        <path refid="classpath"/>
        <pathelement location="${build.dir}/classes"/>
      </classpath>
    </typedef>
    <index index="${build.dir}/index"
      documenthandler="lia.common.TestDataDocumentHandler"
      overwrite="true"
      useCompoundIndex="false">
      <fileset dir="${data.dir}" includes="**/*.properties"/>
      <config basedir="${data.dir}"/>
    </index>
  </target>

  <target name="build-perf-index" depends="compile"
          unless="perf.index.exists"
          description="Build performance testing indexes">

    <info>
      Performance testing, using JUnitPerf, is discussed in the
      "Advanced searching" chapter.
    </info>

    <mkdir dir="${build.dir}/perf"/>

    <!-- build the perf index -->
    <java classname="lia.extsearch.perf.IndexBuilder" failonerror="true">
      <classpath>
        <path refid="classpath"/>
        <pathelement location="${build.dir}/classes"/>
      </classpath>
      <sysproperty key="perf.temp.dir" file="${build.dir}/perf"/>
      <arg value="1000"/>
    </java>
  </target>

  <target name="prepare" depends="compile,build-test-index,build-perf-index"/>

  <target name="test" depends="prepare" description="Run JUnit test cases">
    <info>
      The bulk of Lucene in Action's code is in JUnit test cases.
      All tests are run by default.  To run an individual test, set
      the "test" Ant property, for example, to run QueryParserTest:

          ant test -Dtest=QueryParser

      WARNING: Due to the efficient caching in some file systems, FSDirectory is
               sometimes faster than RAMDirectory, and Compound index
               occasionally outperforms Multifile index.  Thus, once in a
               while you may see the lia.indexing.FSversusRAMDirectoryTest and
               lia.indexing.CompoundVersusMultiFileIndexTest tests fail.
    </info>

    <junit errorProperty="test.failed"
      failureProperty="test.failed"
      reloading="false">
      <sysproperty key="index.dir" file="${build.dir}/index"/>
      <sysproperty key="perf.temp.dir" file="${build.dir}/perf"/>
      <classpath>
        <path refid="classpath"/>
        <pathelement location="${build.dir}/classes"/>
      </classpath>
      <formatter type="brief" usefile="false"/>
      <batchtest unless="test">
        <fileset dir="${build.dir}/classes" includes="**/*Test.class"/>
      </batchtest>
      <batchtest if="test">
        <fileset dir="${build.dir}/classes" includes="**/${test}Test.class"/>
      </batchtest>
    </junit>

    <fail if="test.failed">Test(s) failed!!!</fail>
  </target>


  <!--
     M e e t   L u c e n e
  -->
  <target name="Indexer" depends="prepare"
          description="Indexes a directory of .txt files">
    <info>
      Index a directory tree of .txt files into a Lucene filesystem
      index.  Use the Searcher target to search this index.

      Indexer is covered in the "Meet Lucene" chapter.
    </info>

    <input message="Directory for new Lucene index: [indexes/MeetLucene]"
           addProperty="index.dir"
           defaultValue="indexes/MeetLucene"
    />

    <input message="Directory tree of .txt files to index: [.]"
           addProperty="text.dir"
           defaultValue="."
    />

    <input message="Overwrite ${index.dir}?"
           validargs="y,n"
           addproperty="confirm.overwrite"
    />
    <condition property="abort">
      <equals arg1="n" arg2="${confirm.overwrite}"/>
    </condition>
    <fail if="abort">Aborted.</fail>

    <run-main class="lia.meetlucene.Indexer">
      <args>
        <arg file="${index.dir}"/>
        <arg file="${text.dir}"/>
      </args>
    </run-main>
  </target>

  <target name="Searcher" depends="prepare"
          description="Searches an index built by Indexer">
    <info>
      Search an index built using Indexer.

      Searcher is described in the "Meet Lucene" chapter.
    </info>

    <input message="Directory of existing Lucene index built by Indexer: [indexes/MeetLucene]"
           addProperty="index.dir"
           defaultValue="indexes/MeetLucene"
    />

    <input message="Query: [+text +content]"
           addProperty="query"
           defaultValue="+text +content"
    />

    <run-main class="lia.meetlucene.Searcher">
      <args>
        <arg file="${index.dir}"/>
        <arg value="${query}"/>
      </args>
    </run-main>
  </target>

  <!--
     S e a r c h i n g
  -->
  <target name="Explainer" depends="prepare"
          description="Demonstrates Lucene's Explanation feature">
    <info>
      Display Lucene's Explanation of each resulting hit of a search.

      Any filesystem Lucene index and query may be used; use the defaults
      for an example.

      The Explanation feature is detailed in the "Searching" chapter.
    </info>

    <input message="Directory for existing Lucene index: [build/index]"
           addProperty="index.dir"
           defaultValue="build/index"
    />
    <input message="Query: [junit]"
           addProperty="query"
           defaultValue="junit"
    />

    <run-main class="lia.searching.Explainer">
      <args>
        <arg file="${index.dir}"/>
        <arg value="${query}"/>
      </args>
    </run-main>
  </target>


  <!--
     A n a l y s i s
  -->
  <target name="AnalyzerDemo" depends="prepare"
          description="Demonstrates analysis of text">
    <info>
      Demonstrates analysis of sample text.

      Refer to the "Analysis" chapter for much more on this
      extremely crucial topic.
    </info>

    <input message="String to analyze: [This string will be analyzed.]"
           addProperty="string"
           defaultValue="This string will be analyzed."
    />
    <run-main class="lia.analysis.AnalyzerDemo">
      <args>
        <arg value="${string}"/>
      </args>
    </run-main>
  </target>

  <target name="SynonymAnalyzerViewer" depends="prepare"
          description="Examples of synonym injection">
    <info>
      Using a custom SynonymAnalyzer, two fixed strings are
      analyzed with the results displayed.  Synonyms, from the
      WordNet database, are injected into the same positions
      as the original words.

      See the "Analysis" chapter for more on synonym injection and
      position increments.  The "Tools and extensions" chapter covers
      the WordNet feature found in the Lucene sandbox.
    </info>

    <run-main class="lia.analysis.synonym.SynonymAnalyzerViewer">
      <args>
        <arg file="indexes/wordnet"/>
      </args>
    </run-main>
  </target>

  <target name="ChineseDemo" depends="prepare"
          description="Examples of Chinese analysis">
    <info>
      The Chinese text of "tao te ching" is analyzed with four
      different analyzers.  The results are displayed in AWT GUI
      labels to avoid font issues in the console.  Your system may
      still not show the example properly if you do not have the
      appropriate font.  The program is spawned, requiring you
      to close it independently of Ant.  Four windows are created,
      which overlap one another, move the top one to see the one below.

      See the "Analysis" chapter for a screenshot of this example
      and more details on non-English analysis.
    </info>

    <run-main class="lia.analysis.i18n.ChineseDemo" spawn="yes"/>
  </target>

  <target name="NutchExample" depends="prepare"
          description="Demonstrates Nutch's analyzer">
    <info>
      Demonstrates Nutch's unique analysis process of bigramming common
      terms.

      Nutch analysis is covered in the "Analysis" chapter.  An in-depth
      case study of Nutch is in the "Case Studies" chapter.
    </info>

    <run-main class="lia.analysis.nutch.NutchExample"/>
  </target>

  <!--
     A d v a n c e d     S e a r c h i n g
  -->
  <target name="BooksLikeThis" depends="prepare"
          description="Demonstrates a term vector use">
    <info>
      Demonstrates use of term vectors for use in locating
      other documents like a given document.

      Term vectors and the code used in this example are discussed in
      the "Advanced Searching" chapter.
    </info>

    <run-main class="lia.advsearching.BooksLikeThis"/>
  </target>

  <target name="SortingExample" depends="prepare"
          description="Demonstrates several ways to sort results">
    <info>
      Lucene's new sorting capabilities are demonstrated by sorting
      the same search results in various ways.

      Sorting is covered in the "Advanced searching" chapter.
    </info>

    <run-main class="lia.advsearching.SortingExample"/>
  </target>

  <target name="SearchServer" depends="prepare"
          description="Remote and multi-index searching">
    <info>
      Lucene's remote and multiple index searching capabilities are
      demonstrated in this example.  The multiple index searching is
      done using both the sequential MultiSearcher and multi-threaded
      ParallelMultiSearcher APIs over 26 (one for each letter of the
      alphabet) indexes.

      Remote, multiple, and parallel indexing searching is covered in
      the "Advanced searching" chapter.

      WARNING: SearchServer currently does not shut down gracefully,
      though the SearchClient does complete its searches successfully.
      Ant is configured to time-out SearchServer and kill it forcefully
      after 20 seconds resulting in an ugly "error" message.
    </info>

    <parallel timeout="20000">
      <run-main class="lia.advsearching.remote.SearchServer">
        <args>
          <arg file="indexes/distributed"/>
        </args>
      </run-main>
      <sequential>
        <sleep seconds="5"/>
        <run-main class="lia.advsearching.remote.SearchClient">
          <args>
            <arg value="java"/>
          </args>
        </run-main>
      </sequential>
    </parallel>
  </target>

  <!--
     H a n d l i n g     T y p e s
  -->
  <target name="ExtensionFileHandler" depends="prepare"
          description="Demonstrates the document handling framework">
    <info>
      This example demonstrates the file extension document handler.
      Documents with extensions .xml, .rtf, .doc, .pdf, .html, and .txt are
      all handled by the framework.  The contents of the Lucene Document
      built for the specified file is displayed.
    </info>

    <input message="File: [src/lia/handlingtypes/data/HTML.html]"
           addProperty="file"
           defaultValue="src/lia/handlingtypes/data/HTML.html"
    />

    <run-main class="lia.handlingtypes.framework.ExtensionFileHandler">
      <args>
        <arg file="src/lia/handlingtypes/framework/handler.properties"/>
        <arg file="${file}"/>
      </args>
    </run-main>
  </target>

  <!--
     T o o l s
  -->
  <target name="CellPhone" depends="prepare"
          description="Demonstrates using WordNet for T9 input">
    <info>
      This example spawns a Swing user interface demonstrating the
      WordNet database used as a T9 cell phone mockup interface.  The
      WordNet database was pre-processed into a Lucene index indexed by
      each word's T9 equivalent.  The search utilizes a prefix query,
      and some boosting to weight exact matches higher.

      This application is described in more detail in the
      "Tools and extensions" chapter.
    </info>

    <run-main class="lia.tools.CellPhone" spawn="yes">
      <args>
        <arg file="indexes/t9"/>
      </args>
    </run-main>
  </target>

  <target name="ready-set-go">
    <echo level="info">
      The code will next be compiled and the test indexes will be
      created.  This process is only done once.  Follow the
      instructions from the README (or as shown from "ant help")
      after this process completes.
    </echo>
  </target>

  <target name="default" depends="help,ready-set-go,prepare"/>
</project>
